{"version":3,"file":"static/js/674.7e436b62.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx","components/Reviews/Reviews.module.css","components/Reviews/Reviews.jsx","webpack://react-homework-template/./src/components/MoviesList/MoviesList.module.css?de3d","components/MoviesList/MoviesList.jsx","webpack://react-homework-template/./src/components/Searchbar/Searchbar.module.css?8d9e","components/Searchbar/Searchbar.jsx","webpack://react-homework-template/./src/components/OneMovieDetails/OneMovieDetails.module.css?c5c0","components/OneMovieDetails/OneMovieDetails.jsx","webpack://react-homework-template/./src/pages/HomePage/HomePage.module.css?5baa","pages/HomePage/HomePage.jsx","services/movieApi.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"Cast_list__GlWio\",\"img\":\"Cast_img__-isbW\",\"item\":\"Cast_item__a0CDL\"};","import { Spinner } from 'components';\nimport { getActors } from '../../services/movieApi';\nimport { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport s from './Cast.module.css';\n\nfunction Cast() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [actors, setActors] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchMoviesBySearch = async () => {\n      setIsLoading(true);\n      try {\n        const data = await getActors(movieId);\n        // console.log('ActorsArray: ', data.cast);\n        setActors(data.cast);\n      } catch (error) {\n        console.log(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchMoviesBySearch();\n  }, [movieId]);\n\n  const elements = actors.map(({ id, name, profile_path }) => {\n    profile_path\n      ? (profile_path = `https://image.tmdb.org/t/p/w500/${profile_path}`)\n      : (profile_path =\n          'https://upload.wikimedia.org/wikipedia/commons/4/47/GarvaGriha_in_KaryaBinayak.jpg');\n    return (\n      <li className={s.item} key={id}>\n        <img className={s.img} src={profile_path} alt={name} /> <p>{name}</p>\n      </li>\n    );\n  });\n  return (\n    <>\n      {isLoading && <Spinner />}\n      {actors.length > 0 ? (\n        <ul className={s.list}>{elements}</ul>\n      ) : (\n        <p>We don't have information about cast</p>\n      )}\n    </>\n  );\n}\n\nexport default Cast;\n","// extracted by mini-css-extract-plugin\nexport default {};","import { Spinner } from 'components';\nimport { getReviews } from '../../services/movieApi';\nimport { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport s from './Reviews.module.css';\n\nfunction Reviews() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchMoviesReviewsById = async () => {\n      setIsLoading(true);\n      try {\n        const data = await getReviews(movieId);\n\n        setReviews(data);\n      } catch (error) {\n        console.log(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchMoviesReviewsById();\n  }, [movieId]);\n\n  const elements = reviews.map(({ id, author, content }) => {\n    return (\n      <li key={id}>\n        <h3>Author: {author}</h3>\n        <p>{content}</p>\n      </li>\n    );\n  });\n  return (\n    <>\n      {isLoading && <Spinner />}\n      {reviews.length > 0 ? (\n        <ul className={s.list}>{elements}</ul>\n      ) : (\n        <p>We don't have any reviews for this movie, sorry</p>\n      )}\n    </>\n  );\n}\n\nexport default Reviews;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"MoviesList_list__0Owr9\",\"item\":\"MoviesList_item__eePYv\",\"title\":\"MoviesList_title__PB2c8\",\"link\":\"MoviesList_link__8rTGX\",\"img\":\"MoviesList_img__v4jFC\"};","import { Link, useLocation } from 'react-router-dom';\nimport s from './MoviesList.module.css';\n\nfunction MoviesList({ movies }) {\n  const location = useLocation();\n\n  const elements = movies.map(({ id, title, poster_path }) => {\n    poster_path\n      ? (poster_path = `https://image.tmdb.org/t/p/w500/${poster_path}`)\n      : (poster_path =\n          'https://upload.wikimedia.org/wikipedia/commons/4/47/GarvaGriha_in_KaryaBinayak.jpg');\n\n    const finalTitle = function () {\n      if (title.length <= 40) {\n        return title;\n      } else {\n        return title.slice(0, 38) + '...';\n      }\n    };\n    return (\n      <li className={s.item} key={id}>\n        <Link\n          to={`/movies/${id}`}\n          state={{ from: location }}\n          className={s.link}\n        >\n          <img src={poster_path} alt={title} className={s.img} width=\"200\" />\n          <p className={s.title}>{finalTitle()}</p>\n        </Link>\n      </li>\n    );\n  });\n  return <ul className={s.list}>{elements}</ul>;\n}\n\nexport default MoviesList;\n","// extracted by mini-css-extract-plugin\nexport default {\"searchbar\":\"Searchbar_searchbar__0FWoU\",\"button\":\"Searchbar_button__nkcjk\",\"buttonIcon\":\"Searchbar_buttonIcon__bKJRf\",\"buttonLabel\":\"Searchbar_buttonLabel__ftNUS\",\"input\":\"Searchbar_input__19umw\"};","import s from './Searchbar.module.css';\nimport { BsSearch } from 'react-icons/bs';\n// import PropTypes from 'prop-types';\nimport { useSearchParams } from 'react-router-dom';\nimport { useEffect, useRef, useState } from 'react';\nimport { searchMovies } from '../../services/movieApi';\nimport { MoviesList, Spinner } from 'components';\n\nconst Searchbar = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const inputRef = useRef(null);\n\n  const query = searchParams.get('query');\n\n  useEffect(() => {\n    const fetchMoviesBySearch = async () => {\n      setIsLoading(true);\n      try {\n        const data = await searchMovies(query);\n        setMovies(data);\n        // console.log('data: ', data);\n      } catch (error) {\n        console.log(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    if (query) {\n      fetchMoviesBySearch();\n    }\n  }, [query]);\n\n  // const handledInputChange = e => {\n  //   setQuery(e.currentTarget.value.toLowerCase());\n  // };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const nextParams =\n      inputRef.current.value !== '' ? { query: inputRef.current.value } : {};\n    // console.log('inputRef.current.value', inputRef.current.value);\n    setSearchParams(nextParams);\n  };\n\n  return (\n    <>\n      <header className={s.searchbar}>\n        <form className=\"form\" onSubmit={handleSubmit}>\n          <button type=\"submit\" className={s.buttonIcon}>\n            <BsSearch size=\"15px\" />\n          </button>\n\n          <input\n            // onChange={handledInputChange}\n            // value={query}\n            ref={inputRef}\n            className={s.input}\n            type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search images and photos\"\n          />\n        </form>\n      </header>\n      {isLoading && <Spinner />}\n      <MoviesList movies={movies} />\n    </>\n  );\n};\n\n// Searchbar.propTypes = {\n//   catchSubmitInfo: PropTypes.func.isRequired,\n// };\n\nexport default Searchbar;\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"OneMovieDetails_item__dqk7h\",\"description\":\"OneMovieDetails_description__Cv6LY\",\"img\":\"OneMovieDetails_img__wm6lH\"};","import s from './OneMovieDetails.module.css';\nfunction OneMovieDetails({\n  id,\n  title,\n  poster_path,\n  release_date,\n  vote_average,\n  overview,\n  genres,\n}) {\n  const score = (10 * vote_average).toFixed();\n  const releaseYear = new Date(release_date).getFullYear();\n\n  const genresList = genres?.map(genre => genre.name).join(', ');\n  // console.log('genresList: ', genresList);\n\n  poster_path\n    ? (poster_path = `https://image.tmdb.org/t/p/w500/${poster_path}`)\n    : (poster_path =\n        'https://upload.wikimedia.org/wikipedia/commons/4/47/GarvaGriha_in_KaryaBinayak.jpg');\n\n  return (\n    <div>\n      <div className={s.item} key={id}>\n        <img src={poster_path} alt={title} className={s.img} width=\"232\" />\n        <div className={s.description}>\n          <h2 className={s.title}>\n            {title} ({releaseYear})\n          </h2>\n          <p className={s.text}>\n            User score: {score ? score : 'Sorry, information not avalaible'}%\n          </p>\n          <h3 className={s.title}>Overview</h3>\n          <p className={s.text}>\n            {overview ? overview : 'Sorry, information not avalaible'}\n          </p>\n          <h3 className={s.title}>Genres</h3>\n          <p className={s.text}>\n            {genresList.length > 0\n              ? genresList\n              : 'Sorry, information not avalaible'}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default OneMovieDetails;\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"HomePage_title__UFLA3\"};","import { useState, useEffect } from 'react';\nimport { getTrendingMovies } from '../../services/movieApi';\nimport { MoviesList, Spinner } from 'components';\n\nimport s from './HomePage.module.css';\n\nfunction HomePage() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    const fetchTrendingMovies = async () => {\n      setIsLoading(true);\n\n      try {\n        const data = await getTrendingMovies();\n        // console.log('data: ', data);\n        setMovies(data);\n      } catch (error) {\n        console.log('error: ', error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchTrendingMovies();\n  }, []);\n\n  return (\n    <main>\n      {isLoading && <Spinner />}\n      <h2 className={s.title}>Popular movies today</h2>\n      <MoviesList movies={movies} />\n    </main>\n  );\n}\n\nexport default HomePage;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'eb87ea8e65ad3520d4ba03c42b454490',\n  },\n});\n\nexport const getTrendingMovies = async () => {\n  const { data } = await instance.get('/trending/movie/day');\n  // console.log('data: ', data);\n  return data.results;\n};\n\nexport const searchMovies = async (query, page = 1) => {\n  const { data } = await instance.get('/search/movie', {\n    params: {\n      query,\n      page,\n    },\n  });\n  //api.themoviedb.org/3/search/movie?api_key=${process.env.REACT_APP_THEMOVIE_API_KEY}&language=en-US&query=${searchTerm}&page=1&include_adult=false`\n  return data.results;\n};\nexport const getMovieDetails = async movie_id => {\n  const { data } = await instance.get(`/movie/${movie_id}`);\n  // const { data } = await instance.get(`/movie/`, { params: { movieId } });\n\n  return data;\n};\n\nexport const getActors = async movie_id => {\n  const { data } = await instance.get(`/movie/${movie_id}/credits`);\n  return data;\n};\nexport const getReviews = async movie_id => {\n  const { data } = await instance.get(`/movie/${movie_id}/reviews`);\n  return data.results;\n};\n"],"names":["useState","isLoading","setIsLoading","actors","setActors","movieId","useParams","useEffect","fetchMoviesBySearch","getActors","data","cast","console","log","message","elements","map","id","name","profile_path","className","s","src","alt","Spinner","length","reviews","setReviews","fetchMoviesReviewsById","getReviews","author","content","movies","location","useLocation","title","poster_path","to","state","from","width","slice","useSearchParams","searchParams","setSearchParams","setMovies","inputRef","useRef","query","get","searchMovies","onSubmit","e","preventDefault","nextParams","current","value","type","size","ref","autoComplete","autoFocus","placeholder","release_date","vote_average","overview","genres","score","toFixed","releaseYear","Date","getFullYear","genresList","genre","join","fetchTrendingMovies","getTrendingMovies","instance","axios","baseURL","params","api_key","results","page","getMovieDetails","movie_id"],"sourceRoot":""}